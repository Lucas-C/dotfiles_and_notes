#---------
# Exports
#---------
# DO NOT INHERIT FROM PARENT SHELL $PATH
export PATH=/bin
PATH=/sbin:$PATH
PATH=/usr/bin:$PATH
PATH=/usr/sbin:$PATH
PATH=/usr/local/bin:$PATH
PATH=/usr/local/sbin:$PATH
PATH=~/.local/bin/:$PATH
PATH=$BASHRC_DIR/bin:$PATH

NPM_PACKAGES="$HOME/.npm-packages"
#echo "prefix = $NPM_PACKAGES" >> ~/.npmrc
PATH="$PATH:$NPM_PACKAGES/bin"
MANPATH="$NPM_PACKAGES/share/man"
if type manpath >/dev/null 2>&1; then  # from man-db package
  MANPATH="$MANPATH:$(manpath)"
fi
NODE_PATH="$NPM_PACKAGES/lib/node_modules"

if [ -n "${VIRTUAL_ENV:-}" ]; then
    PATH=$VIRTUAL_ENV/bin:$PATH
fi

export GOPATH=~/gocode
PATH=$GOPATH/bin:$PATH

export SHELL # needed for pew: https://github.com/berdario/pew/blob/master/pew/pew.py#L169

DISPLAY=:0 # for xclip, can be checked with 'w' cmd

export HISTSIZE=20000 # equivalent to HISTFILESIZE and .inputrc 'history-size'
export HISTFILESIZE=$HISTSIZE
export HISTTIMEFORMAT="%F %T "
export HISTCONTROL=ignoreboth:erasedups # ignoreboth = ignoredups + ignorespace
shopt -s histappend # append to the history file, don't overwrite it
alias r='fc -s' # 'repeat' - USAGE: r [old=new] [cmd] : runs last command [matching $cmd if provided], after performing the OLD=NEW substitution

# The following is better than a blunt 'export LANG=C',
# that would also break support for non-ASCII caracters in the terminal.
# TODO: compare the roles of LANG / LC_ALL : are they redundant ?
alias comm='LANG=C LC_ALL=C comm' # needs to be coherent with 'sort'
alias grep='LANG=C LC_ALL=C grep'
alias sed='LANG=C LC_ALL=C sed'
alias awk='LANG=C LC_ALL=C awk'
alias sort='LANG=C LC_ALL=C sort'

swap() { # swap 2 files
    local tmpfile=$(mktemp $(dirname "$1")/XXXXXX)
    mv "$1" "$tmpfile"
    mv "$2" "$1"
    mv "$tmpfile" "$2"
}

#---------------
# Text display
#---------------
export EDITOR=vim
mkdir -p ~/.vim/undodir

vimhelp () { sed 's/^\(\(-\|[0-9]\.\) [^ ].*\)$/\1\\/' ${BASHRC_DIR}/misc/Vim.md | md2man; }

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
alias less='less --ignore-case --LONG-PROMPT'

md2man () { pandoc -s -f markdown -t man "$@" | man -l -; }
#md2html () {
#    pandoc --include-in-header ~/minimal-md3.css --include-in-header $code/misc/Presentation/md-tags.css \
#        -s -S --toc -f markdown -t html "$1" > "${1%%.md}.html" && firefox "${1%%.md}.html" &
#}

diff_alt () {
    cat <<EOF
${_UNDER}ALT:${_END} \
colordiff -rC3 --exclude=.git; \
diffs ${_UNDER}# == 'diff -U2 ... | diffstat' ${_END}; \
sdiff ${_UNDER}# == 'diff --side-by-side', but faster${_END} ; \
vimdiff ${_UNDER}# colored side-by-side${_END} ; \
diff3 ; \
jeffkaufman/icdiff ; \
opendiff ${_UNDER}# OSX${_END}
EOF
}

alias diff='diff_alt && diff -bB --suppress-common-lines'
alias sdiff='sdiff -bB --suppress-common-lines'
diffs () { /usr/bin/diff -U2 "$@" | diffstat; }

if type grc >/dev/null 2>&1; then # ALT: nojhan/colout
    alias cl='grc --stderr --stdout --colour=auto' # DO NOT SET --color=on
    # => it disables bash_completion : _completion_loader dynamically loads completion files,
    # and they would use the aliased cmds to figure the available completable arguments
    # (and fail to do so, e.g. for 'make', because of the colored output)
    alias make='cl make -j3'
    cl_dmesg () { dmesg "$@" | grcat conf.proftpd; }; alias dmesg=cl_dmesg
    alias gcc='cl gcc'
    alias g++='cl g++'
    alias as='cl as'
    alias ld='cl ld'
    alias netstat='cl netstat'
    alias ping='cl ping'
    alias traceroute='cl traceroute'
    alias diff='diff_alt && cl diff -b'
    alias tail='cl tail'
    colorless () {
        # --RAW-CONTROL-CHARS is required to print colors generated by 'grc'
        if [ $# -ne 0 ]; then
            grc --stderr --stdout cat "$@" | /usr/bin/less --ignore-case --LONG-PROMPT --RAW-CONTROL-CHARS
        elif [ -t 0 ]; then # nothing in stdin
            /bin/less
            return 1
        else
            grcat conf.log | /usr/bin/less --ignore-case --LONG-PROMPT --RAW-CONTROL-CHARS
        fi
    }
    alias less=colorless
fi

alias tF='tail -F'
if less --help | grep -q '\-F'; then
    alias tF='less +F'      # Alt: less + SHIFT-F - http://www.brianstorti.com/stop-using-tail
fi


#---------------
# Alias control
#---------------
pa () { # print aliases
    grep --color -h '^[[:space:]]*[[:alnum:]._-]* () {\|^[[:space:]]*alias [[:alnum:]._-]*=' ${BASHRC_DIR}/.bashrc*
    grep --color '[[:alnum:]]*=' ${BASHRC_DIR}/.bash_dirs
}

alias nofuncalias='type -P'
unfuncalias () { # undefine any function/alias named as arg
    unset -f "$@"; unalias "$@" 2>/dev/null
}

alias_r () { # recursively resolve an alias, handle pipes and nested aliases
    local cmd=$1
    local end_of_cmd
    while alias $cmd >/dev/null 2>&1; do
        local aliased=$(alias $cmd | sed "s/alias $cmd=\([\'\"]\)\(.*\)\1/\2/"| sed 's/^[^ ]\+=[^ ]\+ //g')
        cmd=$(echo $aliased | awk '{ print $1 }')
        end_of_cmd="$(echo $aliased | awk '{ $1 = ""; print }') $end_of_cmd" # still contain delim=<space>
    done
    while echo $end_of_cmd | grep -q '|'; do
        cmd="$cmd ${end_of_cmd%%|*} |"
        end_of_cmd=$(alias_r ${end_of_cmd#*|})
    done
    echo $cmd $end_of_cmd
}
#TEST: alias ec='echo' ; alias dog='cat' ; alias boo='ec BOO | dog'


#----
# ls
#----
alias l='LANG=en_US.UTF-8 ls --classify --color=always --group-directories-first'
alias ll='l -l --human-readable --almost-all'
alias lk='ll --reverse --sort=size'       # sort by size, smallest first
alias lt='ll --reverse --sort=time'       # sort by date, oldest first
lsp () { # group files by their prefix
    LANG=en_US.UTF-8 ls -AB1 $@ | sed 's/\(.[^.]\+\).*/\1/' | sort | uniq -c
}
lse () { # group files by their extension - Alt: find . -type f -not -path '*/.git/*' -not -path '*/.idea/*' -not -path '*/bower_components/*' -not -path '*/node_modules/*' -not -path '*/target/*' | awk -F'.' '{print $NF}' | sort | uniq -c | sort
    LANG=en_US.UTF-8 ls -AB1 $@ | awk -F'.' '{print $NF}' | sort | uniq -c
}


#------
# grep
#------
# --mmap, if available, can make it even faster - cf. https://lists.freebsd.org/pipermail/freebsd-current/2010-August/019310.html
alias g='grep -i --color=always'
[ -d $BASHRC_DIR/.git ] && NOTES_FILES=$(cd $BASHRC_DIR && git ls-files)
gn () {
    echo 'Searching local $NOTES_FILES...'
    ( cd ${BASHRC_DIR?} && grep -iI --color=always "${@}" ${NOTES_FILES?}; ) #  $NOTES_FILES can be undefined in case of a virtualenv (eg. with pew)
    if type shaarli >/dev/null 2>&1 && type jq >/dev/null 2>&1; then
        echo 'Searching Shaarli bookmarks...'
        shaarli get-links --limit all --searchterm "${@}" | jq --raw-output '.[]|(.title, "https://chezsoi.org/shaarli/?"+.shorturl)'
    else
        echo 'You need to install jq & pip install shaarli_client to also query chezsoi.org/shaarli'
    fi
}
alias zg='zgrep -i --color=always' # zgrep also works on plain text files, but '-r' isn't supported
alias bzg='bzgrep -i --color=always'
zgr () {
    local pattern=$1
    shift
    find -L $@ -type f | xargs zg $pattern
}
alias ag='ag --follow --color-path="1;35" --color-line-number 32 --hidden --ignore=.git --ignore=.terraform' #E.g. --ignore=.idea --ignore=*-target -F -s $case_Sensitive_string


#-----
# git
#-----
alias gst='git status'
alias gau='git add --update .'
alias gdh='git diff HEAD'
alias gdc='git diff --cached'
alias gdp='git diff -U999999999 --no-color HEAD'
alias gri='git rebase --interactive'
alias gsp='git stash && git pull && git stash pop'

pre_commit_all_cache_repos () {  # Requires sqlite3
    sqlite3 -header -column ~/.cache/pre-commit/db.db < <(echo -e ".width 50\nSELECT repo, ref, path FROM repos ORDER BY repo;")
}

pre_commit_local_cache_repos () {  # Requires PyYaml & sqlite3
    < $(git rev-parse --show-toplevel)/.pre-commit-config.yaml \
        python3 -c "from __future__ import print_function; import sys, yaml; print('\n'.join(h['repo']+' '+h['rev'] for h in yaml.safe_load(sys.stdin)['repos'] if h['repo'] != 'local'))" \
        | while read repo rev; do
            echo $repo
            sqlite3 ~/.cache/pre-commit/db.db "SELECT ref, path FROM repos WHERE repo = '$repo' AND ref = '$rev';"
            echo
        done
}

pre_commit_db_rm_repo () {  # Requires sqlite3
    local repo=${1?'Missing parameter'}
    local repo_path=$(sqlite3 ~/.cache/pre-commit/db.db "SELECT path FROM repos WHERE repo LIKE '%${repo}%';")
    if [ -z "$repo_path" ]; then
        echo "No repository known for repo $repo"
        return 1
    fi
    rm -rf "$repo_path"
    sqlite3 ~/.cache/pre-commit/db.db "DELETE FROM repos WHERE repo LIKE '%${repo}%';";
}


#------------
# One-letter
#------------
alias ..="cd .."
alias ...="cd ../.."
alias e='$EDITOR'
alias k=kubectl
f () { ( nohup firefox "${@:-$(cat)}" >~/firefox.log 2>&1 & ); }
export BROWSER=firefox  # used by Python webbrowser module
t () { # Execute some cmd with start/end timestamps
    date +"# Started: %c - @%s"
    local start_time=$(date +%s)
    "${@:-$(cat)}"
    local retcode=$?
    local end_time=$(date +%s)
    date +"# Ended  : %c - @%s - Elapsed: $((end_time - start_time))s"
    $(exit $retcode)
}
alias ..="cd .."
alias ...="cd ../.."
# Recipes from https://superuser.com/a/611582/255048 :
countdown() {
    start="$(( $(date '+%s') + $1))"
    while [ $start -ge $(date +%s) ]; do
        time="$(( $start - $(date +%s) ))"
        printf '%s\r' "$(date -u -d "@$time" +%H:%M:%S)"
        sleep 0.1
    done
}
stopwatch() {
    start=$(date +%s)
    while true; do
        time="$(( $(date +%s) - $start))"
        printf '%s\r' "$(date -u -d "@$time" +%H:%M:%S)"
        sleep 0.1
    done
}

#---------
# Languages
#----------
alias tkcon='tkcon -load Tk'

LIBSODIUM_MAKE_ARGS=-j4  # for pynacl - cf. https://github.com/pyca/pynacl/issues/302
python () {
    if [ "$#" -eq 0 ]; then
        PYTHONSTARTUP=$BASHRC_DIR/.pythonrc $(type -P python)
    else
        $(type -P python) "$@"
    fi
}
alias djshell='PYTHONSTARTUP=$BASHRC_DIR/.pythonrc ./manage.py shell_plus --use-pythonrc'
alias ipy='PYTHONSTARTUP=$BASHRC_DIR/.pythonrc ipython --pdb'
py_module_path () { # USAGE: py_module_path $module_name [$py_version]
    python${2:-} -c "from __future__ import print_function; import $1; print($1.__file__ if hasattr($1, '__file__') else 'builtin')" | sed 's/pyc$/py/'
}

find_constants () {
    find "${@:-$(cat)}" -print0 \
        | xargs -0 perl -wne 'while ($_ =~ /[^\w]([A-Z][A-Z0-9_]+)[^\w]/g) {print $1."\n"}' \
        | sort | uniq -c | sort | awk '{if ($1 > 1) print}'
}
find_constants_values () {
    find "${@:-$(cat)}" -print0 \
        | xargs -0 perl -wne 'while ($_ =~ /[^\w]([A-Z][A-Z0-9_]+\s+=\s+.*)/g) {print $1."\n"}' \
        | sort | uniq
}

#alias perl='rlwrap --remember --multi-line --substitute-prompt "> " $(type -P perl)' # Also, use the debugger: perl -d -e 1
alias node_repl="env NODE_NO_READLINE=1 rlwrap --remember --multi-line node -e 'require(\"repl\").start({useColors: true})'" # OK under Cygwin, but neither .exit/CTRL+D work, use CTRL+C
alias lua='rlwrap --remember --multi-line --always-readline $(type -P lua)'
cljs_rhino () { rlwrap --remember --multi-line --quote-characters '"' --break-chars "(){}[],^%3@\\\";:'" lein trampoline cljsbuild repl-rhino "$@"; }
cljs_node () { rlwrap --remember --multi-line --quote-characters '"' --break-chars "(){}[],^%3@\\\";:'" lein trampoline noderepl "$@"; }

alias js='java -cp js.jar org.mozilla.javascript.tools.shell.Main' # Rhino: http://www.mikechambers.com/blog/2003/12/06/shell-scripting-on-os-x-with-ecma-javascript/

# To install ${JYTHON_HOME}bin/jython: java -jar jython_installer-2.7.0.jar - comes with a pip command too, but you can also always jython -m ensurepip
alias ngjy-server='java -server -Dpython.home=$JYTHON_HOME -Dpython.executable=${JYTHON_HOME}bin/jython -jar $NAILGUN_SERVER_JAR' # wget http://search.maven.org/remotecontent?filepath=com/martiansoftware/nailgun-server/0.9.1/nailgun-server-0.9.1.jar
alias ngjy='ng jython' # git clone git://github.com/martylamb/nailgun.git && cd nailgun/nailgun-client && gcc ng.c -o ng && cp ng ~/bin && ng ng-cp ${JYTHON_HOME}jython.jar && ng ng-alias jython org.python.util.jython
alias djy='drip -jar ${JYTHON_HOME}jython.jar' # cf. curl @ https://github.com/ninjudd/drip#installation

jar_java_version () {
    local jar=$(readlink -f $1)
    cd /tmp
    local a_class=$(jar tf "$jar" | grep '^[^$]\+.class$' | head -n 1)
    local a_class_main_dir=$(echo "$a_class" | tr '/' '\n' | head -n 1)
    jar xf "$jar" "$a_class"
    javap -v "$a_class" | grep version
    rm -r $a_class_main_dir
    cd - >/dev/null
}


#-------------
# find helpers
#-------------
findByFilePattern () {
    local pattern="$1"
    shift
    find -L "${@:-.}" -type f -not -path '*/.git/*' -not -path '*/node_modules/*' -exec file {} \; | grep "$pattern" | cut -d':' -f1
}
findTxt () { # ! -iwholename '*.git*' | xargs -I{} grep -H PATTERN {} # | while read file; do ... done
    findByFilePattern text "$@"
}
findImg () {
    findByFilePattern image "$@"
}
findCRLF () {
    findByFilePattern CRLF "$@"
}
findLatin1 () { # aka ISO-8859-1
    findByFilePattern ISO-8859 "$@"
}
findBrokenSymlinks () {
    find -L "${@:-.}" -type l -not -path '*/.git/*' -not -path '*/node_modules/*' -exec file {} \; | grep -F  'broken symbolic link' | cut -d':' -f1
}
findAndSortByDate () { # output more recenter files first
    find -L "${@:-.}" -type f -printf '%T@ %p\n' | sort -k 1nr | sed -e 's/^[^ ]* //' -e "s/'/\\\\'/" | xargs -I{} -n 1 ls -BFlhA --color=always "{}"
}

rmbak () {
    find -L ${@:-.} -name "*.bak" | xargs rm -rf;
}
rmcover () {
    find -L ${@:-.} -name "*,cover" | xargs rm -rf;
}
rmpyc () {
    find -L ${@:-.} -name "*.pyc" -o -name "*,cover" -o -name __pycache__ | xargs rm -rf;
}


#------------------
# Stream processing
#------------------
alias lower='tr "[:upper:]" "[:lower:]"'
alias upper='tr "[:lower:]" "[:upper:]"'

html_escape () { python -c 'import html, sys; sys.stdout.writelines([html.escape(line) for line in sys.stdin])'; }
html_unescape () { python -c 'import html, sys; sys.stdout.writelines([html.unescape(line) for line in sys.stdin])'; }
urlencode () { python3 -c 'import sys; from urllib.parse import quote_plus; sys.stdout.writelines([quote_plus(line) for line in sys.stdin])'; }
# Alt: perl -wne 'chomp; s/([^-_.~A-Za-z0-9])/sprintf("%%%02X", ord($1))/seg; print "$_\n"'; }
urldecode () { python3 -c 'import sys; from urllib.parse import unquote; sys.stdout.writelines([unquote(line) for line in sys.stdin])'; }
# Alt: sed -e's/%\([0-9A-F][0-9A-F]\)/\\\\\x\1/g' | xargs echo -e; }
iconv_help () {
    local file=${1:-\$file}
    echo iconv -f ISO-8859-1 -t UTF-8 $file \> ${2:-$file.utf8}
    echo iconv -t 'ASCII//TRANSLIT//IGNORE' $file \> ${2:-$file.ascii}
    echo tail --bytes=+4 UTF8WithBom.txt \> UTF8WithoutBom.txt
}
alias utf8=iconv_help

alias nocrlf="echo 'Use dos2unix'"
notabs () { # INPLACE Replace tabs by 4 spaces & remove trailing ones & spaces
    for f in $(findTxt "${@:-$(cat)}"); do
        perl -pi -e 's/\t/    /g' "$f"
        perl -pi -e 's/[\t\r ]*$//g' "$f"
        # 'perl -p' is more portable than sed (e.g. \t\n does not work under OSX)
    done
}
nonascii () {
    g -P -n "[\x80-\xFF]" "$@"
}
has_unicode_non_breaking_space () {
    perl -ne 'print if $m = /\xc2\xa0/; $t ||= $m; END{exit !$t}' "$@"
}
remove_unicode_non_breaking_spaces () {
    perl -pi -e '$t ||= s/\xc2\xa0/ /g; END{ exit !$t}' "$@"
}
get_unicode_categories () {
    python -c 'import unicodedata, sys; sys.stdout.writelines([c+" ("+unicodedata.category(c)+")\n" for line in sys.stdin for c in line])' < "$1"
}
non_printable_unicode_chars () {
    python -c 'import unicodedata, sys; lines = [str(i)+": "+line for i, line in enumerate(sys.stdin) if not all(unicodedata.category(c) in ("Cc", "Ll", "Lu", "Nd", "No", "Pc", "Pd", "Pe", "Pf", "Pi", "Po", "Ps", "Sc", "Sk", "Sm", "So", "Zs") for c in line)]; sys.stdout.writelines(lines); sys.exit(0 if lines else 1)' < "$1"
}

alias json_fmt='python -mjson.tool' # don't work well with non ascii

alias funiq="awk '"'{k[$0]++}END{for(i in k){printf("%7s %s\n", k[i], i);}}'"'" # faster than 'sort | uniq -c' BUT output is not sorted. Also, it's very easy to swap the output columns

# FROM: http://unix.stackexchange.com/questions/13731/is-there-a-way-to-get-the-min-max-median-and-average-of-a-list-of-numbers-in
# One-pass stable variance algo: http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Online_algorithm

stats () { # --no-header | awk '{print $3}'     # buggy if input has CRLFs - Alt: csvstat -H ( pip install csvkit ) / ministat
    [ "$1" = "--no-header" ] || printf "%-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s\n"\
        1-SUM 2-COUNT 3-MEAN 4-STD_DEV 5-MIN 6-TP01 7-TP10 8-MEDIAN 9-TP90 10-TP99 11-MAX
    sort -n | awk 'BEGIN{n=0;sum=0;mean=0;M2=0}\
        /^[^#]/{a[n++]=$1;sum+=$1;delta=$1-mean;mean+=delta/n;M2+=delta*($1-mean)}\
        function tp(ratio){i=n*ratio-1;if(i<0){return a[0];}else{return a[int(i)];}}
        END{unbiased_variance=M2/(n-1);
        std_dev=sqrt(unbiased_variance);
        if((n%2)==1){median=a[int(n/2)];}\
        else{median=(a[n/2]+a[n/2-1])/2;}\
        printf "%-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s\n",\
            sum,n,mean,std_dev,a[0],tp(.01),tp(.1),median,tp(.9),tp(.99),a[n-1]}'
}


#-------------------
# Command overrides
#-------------------
alias sudo='sudo ' # Allow aliases with sudo : http://askubuntu.com/a/22043
alias strings='strings -a' # safer, due to vulnerabilities in libbfd
alias make='make -j3'
alias dmesg='dmesg --ctime' # Alt: http://stackoverflow.com/a/19272272

du () { /usr/bin/du --summarize --human-readable "$@" | sort --human-numeric-sort; }
alias df='df --human-readable --print-type'
alias pstree='pstree -p'

man () { # colored manual with 'help' as a fallback
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
            /usr/bin/man "$@" && return
    help "$@" >/dev/null 2>&1 && help "$@" | less
}

touch () { # touch [EPOCH] [+/-$days_count] $files
    local yymm=$(date +%y%m) dd=$(date +%d) HHMM=$(date +%H%M)
    if [ "$(echo $1 | lower)" = "epoch" ]; then
        yymm=7001
        dd=01
        HHMM=0000
        shift
    fi
    if [[ $1 =~ ^[+-][0-9] ]]; then
        dd=$(($dd$1))
        [ ${#dd} -eq 1 ] && dd=0$dd
        shift
    fi
    local stamp=$yymm$dd$HHMM
    { ! [[ $dd =~ ^[0-3][0-9]$ ]] || [ "$dd" -eq 0 ] || [ "$dd" -gt 31 ] ; } && { echo "Day modifier cannot be applied: $stamp" ; return ; }
    /bin/touch -t $stamp "$@"
}


#-------
# Other
#-------
alias psf='ps -eo user,pid,%cpu,%mem,ppid,tty,stat,rss,etime,start,nice,psr,args --sort=start_time 2>/dev/null'
alias pg='psf | g'
alias ps_codes='man ps | grep -A18 "^PROCESS STATE CODES$"'

nav () { nautilus "${1:-$PWD}/"; }

locate_img_and_preview () {
    local feh_opts='-d -F'
    [ "$1" = "-t" ] && shift && feh_opts=-t # thumbnails mode
    locate -0 -i "${@:-$(cat)}" | xargs -0 -n 1 file | grep image | cut -d: -f1 | feh $feh_opts -f
}

type eog >/dev/null 2>&1 && alias img=eog
type evince >/dev/null 2>&1 && alias pdf=evince
pdf_pages_extract () {  # USAGE: pdf_pages_extract $file $first_page [$last_page]
    local filename=${1:?'Missing or empty filename'}
    local first_page=${2:?'Missing or empty pages range'}
    local last_page=${3:-$first_page}
    gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
        -dFirstPage=$first_page -dLastPage=$last_page \
        -sOutputFile="${filename%.pdf}_p${first_page}-p${last_page}.pdf" "$filename"
}
src2pdf () {
    local noext="${1%.*}"
    pygmentize -O full -o "$noext.html" "$1"
    # enabling line wrapping in <pre> blocks
    perl -i -wpe '/<style.*>$/&&($_.="pre{white-space:pre-wrap;}\n")' "$noext.html"
    wkhtmltopdf "$noext.html" "$noext.pdf"
    rm "$noext.html"
}

fqdn () { python2 -c "import socket ; print socket.gethostbyaddr(\"$@\")[2]" ; } # Better than 'getfqdn' as it will fail properly in case it doesn't find a match
ext_ip () { dig +short myip.opendns.com @resolver1.opendns.com; } # faster than HTTP, e.g. ipecho.net/plain checkip.dyndns.org ifconfig.me
int_ips () { /sbin/ifconfig $1 | grep "inet[^0-9]" | sed 's/.*[^0-9]\([0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\)[^0-9].*/\1/' | grep -v '127\.0\.0\.1'; }

mtr_proto () {
    local host=$1
    traceroute $host | \
        awk 'NR > 1 && $2 != "*" { sub(/^\(/,"",$3); sub(/)$/,"",$3); print $3 }'  | \
        xargs -r -L1 ping -n -i0.5 -c20 -s80 | tee $host.mtr
}

FIFTY_NON_SHADY_NOR_GREY_HASHES='##################################################'
progress_bar () { # receive a serie of integers in {1..100} as input and update a unique progress bar line accordingly
    local percent
    while read percent; do
        printf "\r%-50s (%-3s%%)" ${FIFTY_NON_SHADY_NOR_GREY_HASHES:0:$((percent / 2))} $percent
    done
    echo
}

proc_read_fd_progress () { # args: $pid [$fd] - To simply get a list of FDs: ll /proc/$pid/fd/
    # FROM: https://blogs.oracle.com/ksplice/entry/solving_problems_with_proc
    local pid=${1:?'Missing pid first argument'}
    ! [ -e /proc/$pid/ ] && echo "No process found with PID=$pid" >&2 && return 1
    local fd=$2
    if [ -z "${fd:-}" ]; then
        readlink /proc/$pid/fd/* | nl -v 0 # Tested on 2016/05/19 : error "readlink: extra operand"
        echo -n "Choose a file descriptor: "
        read fd
    fi
    local proc_fd=/proc/$pid/fd/$fd
    ! [ -e $proc_fd ] && echo "fd=$fd is not a valid file descriptor in /proc/$pid/fd/" >&2 && return 2
    local fd_size=$(wc -c $proc_fd | awk '{print $1}')
    echo "Progress reading '$(readlink $proc_fd)':"
    local percent_progress=0
    while [ -e $proc_fd ] && [ "$percent_progress" -ne 100 ] && ! read -n 1 -t 1 dummy; do
        local file_read_progress=$(grep ^pos /proc/$pid/fdinfo/$fd | awk '{print $2}')
        percent_progress=$((100 * $file_read_progress / $fd_size)) # Tested on 2016/05/19 : -bash: 100 * 0 / 0: division by 0 (error token is "0")
        echo $percent_progress
    done | progress_bar
}

memmost() { # args: [proc_count=10] - Courtesy of fsquillace@
    local ps_out=$(psf)
    echo "$ps_out" | head -n 1
    echo "$ps_out" | sort -nr -k 4 | head -n ${1:-10}
}

cpumost() { # args: [proc_count=10] - Courtesy of fsquillace@
    local ps_out=$(psf)
    echo "$ps_out" | head -n 1
    echo "$ps_out" | sort -nr -k 3 | head -n ${1:-10}
}

pid () { sh -c 'echo $PPID'; }
ppid () {
    local pid=${1:-$(sh -c 'echo $PPID')}
    echo $(ps --no-headers --format ppid --pid $pid)
}
# foo () { sh -c 'echo $PPID' ; local pid=$(sh -c 'echo $PPID'); echo $pid ; }
# Same values if invoked in a shell or by executing a ./script
# But differents if invoked in a $(cmd) or sourced.

message () { # ARGS: $message* [$header]
    local message=${1?'Missing message'}
    local header="${@: -1}"
    type -p figlet >/dev/null && [ -n "$header" ] && header=$(figlet $header)
    type -p play >/dev/null && play -n synth 0.1 tri 1000 2>/dev/null # beep !
    echo -e "$header\n$message" | xmessage -center -file -
}

unfuncalias alert
alert () { # USAGE: cmd; alert $ [OR] cmd <CTRL-z> bg; wait %1; alert
    local retcode=$?
    local history_last2lines=$(history | tail -n2 | sed -e 's/^\s*[0-9]\+\s*//')
    message "$@\n\n$history_last2lines" "RETCODE $retcode"
    $(exit $retcode)
}

assert () { # args: cmd arg*
    t "$@"
    local retcode=$?
    test $retcode -eq 0 || alert "Assertion failed"
    $(exit $retcode)
}

if ! type -p timeout >/dev/null; then
    timeout () { # Alternative to coreutils 'timeout'
        if [ "${1:-}" = "-h" -o "${1:-}" = "--help" ]; then
            printf "USAGE: timeout [--no-msg] \$delay_in_seconds \$cmd\n  \$cmd can start with 'exec' to avoid creating a new process\n"
            return
        fi
        local no_msg=false; [ "${1:-}" = "--no-msg" ] && { no_msg=true ; shift ; }
        local s=${1:?'Missing timeout parameters'} ; shift
        ( pid=$(sh -c 'echo $PPID')
          ( $no_msg || echo "Command launched with a ${s}s timeout. To let it live: kill $(sh -c 'echo $PPID')"
            sleep $s
            kill -9 $pid 2>/dev/null || true
          ) & "${@:?'Missing timeout command'}"
        )
    }
fi

audio_record () { # voice/sound recorder through the computer mike
    local out_filename="${1:-$(date +"${HOSTNAME}_%Y-%m-%d_%Hh%Mm%Ss")_audiorecord.wav}"
    avconv -f pulse -i default "${out_filename}"
}

whiteboard_picture_cleaner () { # args: $original_img_file $output_file - use ImageMagick - FROM: https://gist.github.com/lelandbatey/8677901
    convert "$1" -morphology Convolve DoG:15,100,0 -negate -normalize -blur 0x1 -channel RBG -level 60%,91%,0.1 "$2";
}

gif_framecount_reducer () { # args: $gif_path $frames_reduction_factor
    local orig_gif="${1?'Missing GIF filename parameter'}"
    local reduction_factor=${2?'Missing reduction factor parameter'}
    # Extracting the delays between each frames
    local orig_delay=$(gifsicle -I "$orig_gif" | sed -ne 's/.*delay \([0-9.]\+\)s/\1/p' | uniq)
    # Ensuring this delay is constant
    [ $(echo "$orig_delay" | wc -l) -ne 1 ] \
        && echo "Input GIF doesn't have a fixed framerate" >&2 \
        && return 1
    # Computing the current and new FPS
    local new_fps=$(echo "(1/$orig_delay)/$reduction_factor" | bc)
    # Exploding the animation into individual images in /var/tmp
    local tmp_frames_prefix="/var/tmp/${orig_gif%.*}_"
    convert "$orig_gif" -coalesce +adjoin "$tmp_frames_prefix%05d.gif"
    local frames_count=$(ls "$tmp_frames_prefix"*.gif | wc -l)
    # Creating a symlink for one frame every $reduction_factor
    local sel_frames_prefix="/var/tmp/sel_${orig_gif%.*}_"
    for i in $(seq 0 $reduction_factor $((frames_count-1))); do
        local suffix=$(printf "%05d.gif" $i)
        ln -s "$tmp_frames_prefix$suffix" "$sel_frames_prefix$suffix"
    done
    # Assembling the new animated GIF from the selected frames
    convert -delay $new_fps "$sel_frames_prefix"*.gif "${orig_gif%.*}_reduced_x${reduction_factor}.gif"
    # Cleaning up
    rm "$tmp_frames_prefix"*.gif "$sel_frames_prefix"*.gif
}

timestamp_converter () {
    echo $@ | gawk '{print strftime("%c", $0)}'
    # Or date -d @$TIMESTAMP but neither work on OSX
}

font_dflt_fix () {  # cf. https://chezsoi.org/lucas/blog/2016/02/11/en-fixing-fonts-that-raise-a-dflt-table-error-in-firefox/
    local input_fontfile=${1?}
    local fontfile_basename=${input_fontfile%.*}
    local tmpttx_fontfile_name="tmp_$fontfile_basename.ttx"
    ttx -o "$tmpttx_fontfile_name" "$input_fontfile" || return 1
    local ttx_fontfile_name="$fontfile_basename.ttx"
    tr '\n' ' ' < "$tmpttx_fontfile_name" | sed 's~\(<GSUB>.\+<ScriptTag value="DFLT"/>.\+</DefaultLangSys>\)\s\+<!-- LangSysCount=1 -->\s\+<LangSysRecord.\+</LangSysRecord>~\1~' > "$ttx_fontfile_name" || return 1
    ttx -o "$input_fontfile" "$ttx_fontfile_name" || return 1
    rm "$tmpttx_fontfile_name"
}


execute_C_code () {
    local return_code
    echo -e "${1?}" | gcc -w -o tmp_exec -xc - # options meaning: no warnings, language=C
    ./tmp_exec
    return_code=$?
    rm tmp_exec
    return $return_code
}
# Some usage examples:
# execute_C_code 'int main() { abort(); }' -> Abandon (core dumped) [exit code: 134]
# execute_C_code 'int main() { int i = 1 / 0; }' -> Exception en point flottant (core dumped) [exit code: 136]
# execute_C_code 'int main() { *((unsigned int*)0) = 0xDEADBEEF; }' -> Erreur de segmentation (core dumped) [exit code: 139]


# Faster than wc -l or LANG=C LC_ALL=C grep -cF $'\n'
count_chars () {  # USAGE: count_chars '\n' < $file - FROM: http://superuser.com/questions/485800/whats-the-quickest-way-to-count-the-number-of-each-character-in-a-file
    local chars="${1?}"
    execute_C_code "$(cat <<EOF
int cache[256], x, y;
char buf[4096], letters[] = "$chars";
int main() {
    while ((x=read(0, buf, sizeof buf)) > 0)
        for (y=0; y<x; y++)
            cache[(unsigned char)buf[y]]++;
    for (x=0; x<sizeof letters-1; x++)
        printf("'%c' (ASCII char %i) appears %d times\n", letters[x], letters[x], cache[letters[x]]);
}
EOF
)"
}

# Recipe from: https://stackoverflow.com/questions/47691479/listing-all-resources-in-a-namespace#comment105095503_53016918
# The k8s namespace must be provided as argument
alias k8s-show-ns=" kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found -n"

alias dl-vid="yt-dlp -f 'best[filesize<300M]'"
# This allows to retries a playlist download without re-downloading songs already downloaded:
alias dl-playlist="yt-dlp -x -o '%(playlist_index)s - %(title)s.%(ext)s' --restrict-filenames --download-archive downloaded.txt --no-post-overwrites --parse-metadata 'playlist_index:%(track_number)s' --add-metadata"

function no-exif() {
    for img in "$@"; do
        if exiftool -all= "$img" | grep -F "1 image files updated"; then
            rm "${img}_original"
        fi
    done
}

function optim-jpgs() {
    for jpg in "$@"; do
        jpegoptim --all-progressive -m90 "$jpg"
        no-exif "$jpg"
        chmod 644 "$jpg"
    done
}

function optim-pngs() {
    for png in "$@"; do
        pngquant --ext .png -f "$png"
        no-exif "$png"
        chmod 644 "$png"
    done
}

function img2webp() {  # Install: apt install webp
    for img in "$@"; do
        cwebp "$img" -q 100 -o "${img%%.*}.webp"
    done
}

# Recipe from: https://unix.stackexchange.com/a/370221
function container_copy_from_img() { # USAGE: container_copy_from_img $img $path $dst_dir
    local img="${1?'Missing Docker image parameter'}"
    local path="${2?'Missing path parameter'}"
    local dst_dir="${3?'Missing dst_dir parameter'}"
    local cmd=docker
    [[ $(uname -a) =~ ^Linux.+[Mm]icrosoft ]] && cmd=podman
    local container_id=$($cmd create "$img")
    $cmd cp "$container_id:$path" "$dst_dir"
    $cmd rm "$container_id"
}
